function setup() {
createCanvas(600, 600);
noLoop();
}

function draw() {
push();
//map1();
map2(); 
pop();
  
}

//1칸당 
let cellSize = 20;

//rect대신 line으로 바꿈 gpt씀

//1번 맵 line
function drawCell_1(x, y, i, j) {
  strokeWeight(2); //줄 굵기
  stroke(0, 0, 255); //줄 색상

  // 상
  if (i === 0 || map_level1[i - 1][j] === 0) {
    line(x, y, x + cellSize, y);
  }

  // 하
  if (i === map_level1.length - 1 || map_level1[i + 1][j] === 0) {
    line(x, y + cellSize, x + cellSize, y + cellSize);
  }

  // 좌
  if (j === 0 || map_level1[i][j - 1] === 0) {
    line(x, y, x, y + cellSize);
  }

  // 우
  if (j === map_level1[i].length - 1 || map_level1[i][j + 1] === 0) {
    line(x + cellSize, y, x + cellSize, y + cellSize);
  }
}

//2번 맵 line
function drawCell_2(x, y) {
  strokeWeight(2); //줄 굵기
  stroke(0, 0, 255); //줄 색상
  
  // 상
  if (y == 0 || map_level2[y - 1][x] == 0) {
    line(x * cellSize, y * cellSize, (x + 1) * cellSize, y * cellSize);
  }
  
  // 하
  if (y == map_level2.length - 1 || map_level2[y + 1][x] == 0) {
    line(x * cellSize, (y + 1) * cellSize, (x + 1) * cellSize, (y + 1) * cellSize);
  }
  
  // 좌
  if (x == 0 || map_level2[y][x - 1] == 0) {
    line(x * cellSize, y * cellSize, x * cellSize, (y + 1) * cellSize);
  }
  
  // 우
  if (x == map_level2[0].length - 1 || map_level2[y][x + 1] == 0) {
    line((x + 1) * cellSize, y * cellSize, (x + 1) * cellSize, (y + 1) * cellSize);
  }
}

//맵1
function map1() {
  background(0);
  for (let i = 0; i < map_level1.length; i++) {
    for (let j = 0; j < map_level1[i].length; j++) {
      if (map_level1[i][j] == 1) {
        drawCell_1(j * cellSize, i * cellSize, i, j);
      }
    }
  }
}


let map_level1 = [
  [1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1],
  [1,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,1],
  [1,0,1,1,1, 1,0,1,1,1, 1,0,1,1,1, 1,1,1,0,1, 1,1,1,0,1, 1,1,1,0,1],
  [1,0,1,1,1, 1,0,1,1,1, 1,0,1,1,1, 1,1,1,0,1, 1,1,1,0,1, 1,1,1,0,1],
  [1,0,1,1,1, 1,0,1,1,1, 1,0,1,1,1, 1,1,1,0,1, 1,1,1,0,1, 1,1,1,0,1], 
  [1,0,1,1,1, 1,0,1,1,1, 1,0,1,1,1, 1,1,1,0,1, 1,1,1,0,1, 1,1,1,0,1],
  [1,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,1],
  [1,0,1,1,1, 1,0,1,1,1, 1,0,1,1,1, 1,1,1,0,1, 1,1,1,0,1, 1,1,1,0,1],
  [1,0,1,1,1, 1,0,1,1,1, 1,0,1,1,1, 1,1,1,0,1, 1,1,1,0,1, 1,1,1,0,1],
  [1,0,1,1,1, 1,0,1,1,1, 1,0,1,1,1, 1,1,1,0,1, 1,1,1,0,1, 1,1,1,0,1],
  [1,0,1,1,1, 1,0,1,1,1, 1,0,1,1,1, 1,1,1,0,1, 1,1,1,0,1, 1,1,1,0,1],
  [1,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,1],
  [1,0,1,1,1, 1,0,1,1,1, 1,0,1,1,1, 1,1,1,0,1, 1,1,1,0,1, 1,1,1,0,1],
  [1,0,1,1,1, 1,0,1,1,1, 1,0,1,1,1, 1,1,1,0,1, 1,1,1,0,1, 1,1,1,0,1],
  [1,0,1,1,1, 1,0,1,1,1, 1,0,1,1,1, 1,1,1,0,1, 1,1,1,0,1, 1,1,1,0,1],
  [1,0,1,1,1, 1,0,1,1,1, 1,0,1,1,1, 1,1,1,0,1, 1,1,1,0,1, 1,1,1,0,1],
  [1,0,1,1,1, 1,0,1,1,1, 1,0,1,1,1, 1,1,1,0,1, 1,1,1,0,1, 1,1,1,0,1],
  [1,0,1,1,1, 1,0,1,1,1, 1,0,1,1,1, 1,1,1,0,1, 1,1,1,0,1, 1,1,1,0,1],
  [1,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,1],
  [1,0,1,1,1, 1,0,1,1,1, 1,0,1,1,1, 1,1,1,0,1, 1,1,1,0,1, 1,1,1,0,1], 
  [1,0,1,1,1, 1,0,1,1,1, 1,0,1,1,1, 1,1,1,0,1, 1,1,1,0,1, 1,1,1,0,1],
  [1,0,1,1,1, 1,0,1,1,1, 1,0,1,1,1, 1,1,1,0,1, 1,1,1,0,1, 1,1,1,0,1],
  [1,0,1,1,1, 1,0,1,1,1, 1,0,1,1,1, 1,1,1,0,1, 1,1,1,0,1, 1,1,1,0,1],
  [1,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,1],
  [1,0,1,1,1, 1,0,1,1,1, 1,0,1,1,1, 1,1,1,0,1, 1,1,1,0,1, 1,1,1,0,1],
  [1,0,1,1,1, 1,0,1,1,1, 1,0,1,1,1, 1,1,1,0,1, 1,1,1,0,1, 1,1,1,0,1],
  [1,0,1,1,1, 1,0,1,1,1, 1,0,1,1,1, 1,1,1,0,1, 1,1,1,0,1, 1,1,1,0,1],
  [1,0,1,1,1, 1,0,1,1,1, 1,0,1,1,1, 1,1,1,0,1, 1,1,1,0,1, 1,1,1,0,1],
  [1,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,1],
  [1,1,1,1,1, 1,1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1,1,1],
];


//맵2
function map2() {
  background(0);
  for (let i = 0; i < map_level2.length; i++) {
    for (let j = 0; j < map_level2[i].length; j++) {
      if (map_level2[i][j] == 1) {
        drawCell_2(j, i);
      }
    }
  }
}
let map_level2 = [
  [1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,0, 0,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1],
  [1,0,0,0,0, 0,0,0,0,0, 0,0,0,1,0, 0,1,0,0,0, 0,0,0,0,0, 0,0,0,0,1],
  [1,0,1,1,1, 1,0,0,1,1, 1,1,0,1,0, 0,1,0,1,1, 1,1,0,0,1, 1,1,1,0,1],
  [1,0,1,0,0, 0,0,0,0,0, 0,1,0,1,0, 0,1,0,1,0, 0,0,0,0,0, 0,0,1,0,1],
  [1,0,1,0,0, 0,1,1,0,0, 0,1,0,1,0, 0,1,0,1,0, 0,0,1,1,0, 0,0,1,0,1], 
  [1,0,1,0,0, 0,0,0,0,0, 0,1,0,1,0, 0,1,0,1,0, 0,0,0,0,0, 0,0,1,0,1],
  [1,0,0,0,1, 0,1,1,0,1, 0,0,0,1,0, 0,1,0,0,0, 1,0,1,1,0, 1,0,0,0,1],
  [1,0,0,0,1, 0,1,1,0,1, 0,0,0,1,1, 1,1,0,0,0, 1,0,1,1,0, 1,0,0,0,1],
  [1,0,1,0,0, 0,0,0,0,0, 0,1,0,0,0, 0,0,0,1,0, 0,0,0,0,0, 0,0,1,0,1],
  [1,0,1,0,0, 0,1,1,0,0, 0,1,0,0,1, 1,0,0,1,0, 0,0,1,1,0, 0,0,1,0,1], 
  [1,0,1,0,0, 0,0,0,0,0, 0,1,0,0,1, 1,0,0,1,0, 0,0,0,0,0, 0,0,1,0,1],
  [1,0,1,1,1, 1,0,0,1,1, 1,1,0,0,1, 1,0,0,1,1, 1,1,0,0,1, 1,1,1,0,1],
  [1,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,1],
  [1,1,1,1,1, 1,1,1,0,0, 0,0,0,1,1, 1,1,0,0,0, 0,0,1,1,1, 1,1,1,1,1],
  [0,0,0,0,0, 0,0,1,0,1, 1,1,0,1,0, 0,1,0,1,1, 1,0,1,0,0, 0,0,0,0,0], 
  [0,0,0,0,0, 0,0,1,0,1, 1,1,0,1,0, 0,1,0,1,1, 1,0,1,0,0, 0,0,0,0,0],
  [1,1,1,1,1, 1,1,1,0,0, 0,0,0,1,1, 1,1,0,0,0, 0,0,1,1,1, 1,1,1,1,1],
  [1,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,1],
  [1,0,1,1,1, 1,0,0,1,1, 1,1,0,0,1, 1,0,0,1,1, 1,1,0,0,1, 1,1,1,0,1],
  [1,0,1,0,0, 0,0,0,0,0, 0,1,0,0,1, 1,0,0,1,0, 0,0,0,0,0, 0,0,1,0,1],
  [1,0,1,0,0, 0,1,1,0,0, 0,1,0,0,1, 1,0,0,1,0, 0,0,1,1,0, 0,0,1,0,1],
  [1,0,1,0,0, 0,0,0,0,0, 0,1,0,0,0, 0,0,0,1,0, 0,0,0,0,0, 0,0,1,0,1],
  [1,0,0,0,1, 0,1,1,0,1, 0,0,0,1,1, 1,1,0,0,0, 1,0,1,1,0, 1,0,0,0,1],
  [1,0,0,0,1, 0,1,1,0,1, 0,0,0,1,0, 0,1,0,0,0, 1,0,1,1,0, 1,0,0,0,1],
  [1,0,1,0,0, 0,0,0,0,0, 0,1,0,1,0, 0,1,0,1,0, 0,0,0,0,0, 0,0,1,0,1],
  
  [1,0,1,0,0, 0,1,1,0,0, 0,1,0,1,0, 0,1,0,1,0, 0,0,1,1,0, 0,0,1,0,1],
  [1,0,1,0,0, 0,0,0,0,0, 0,1,0,1,0, 0,1,0,1,0, 0,0,0,0,0, 0,0,1,0,1],
  [1,0,1,1,1, 1,0,0,1,1, 1,1,0,1,0, 0,1,0,1,1, 1,1,0,0,1, 1,1,1,0,1],
  [1,0,0,0,0, 0,0,0,0,0, 0,0,0,1,0, 0,1,0,0,0, 0,0,0,0,0, 0,0,0,0,1],
  [1,1,1,1,1, 1,1,1,1,1,1, 1,1,1,0, 0,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1],
];
